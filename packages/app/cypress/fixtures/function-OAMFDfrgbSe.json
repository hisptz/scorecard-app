{
  "id": "OAMFDfrgbSe",
  "href": "http://localhost:8083?api/dataStore/functions/OAMFDfrgbSe",
  "name": "Sample Proportion of Facilities Given a condition",
  "user": { "id": "M5zQapPyTZI" },
  "rules": [
    {
      "id": "i2vaXkSoiIF",
      "json": { "data": "nTEyBpFyfFA" },
      "name": "Membership Form Reporting Rate by filled data",
      "isDefault": true,
      "description": "This is the rule. Using the data set Membership Form."
    }
  ],
  "created": "Mon, 02 Aug 2021 11:57:25 GMT",
  "function": "//Example of function implementation\nparameters.progress(50);\n\nfunction analyticsRequest() {\n    return new Promise(function(resolve, reject) {\n        $.ajax({\n            url: \"../../../api/26/analytics.json?dimension=pe:\" + parameters.pe + \"&dimension=ou:\" + parameters.ou + \"&hierarchyMeta=true&skipData=true\",\n            type: \"GET\",\n            success: function(analyticsResults) {\n                try {\n                    analyticsResults.headers = [{\"name\":\"dx\",\"column\":\"Data\",\"valueType\":\"TEXT\",\"type\":\"java.lang.String\",\"hidden\":false,\"meta\":true},{\"name\":\"pe\",\"column\":\"Period\",\"valueType\":\"TEXT\",\"type\":\"java.lang.String\",\"hidden\":false,\"meta\":true},{\"name\":\"ou\",\"column\":\"Organisation unit\",\"valueType\":\"TEXT\",\"type\":\"java.lang.String\",\"hidden\":false,\"meta\":true},{\"name\":\"value\",\"column\":\"Value\",\"valueType\":\"NUMBER\",\"type\":\"java.lang.Double\",\"hidden\":false,\"meta\":false}];\n                    analyticsResults.metaData.names[parameters.rule.id] = parameters.rule.name;\n                    analyticsResults.metaData.dx = [parameters.rule.id];\n                    resolve(analyticsResults);\n                } catch (error) {\n                    reject(error);\n                }\n            },\n            error: function(error) {\n                reject(error);\n            }\n        });\n    })\n}\n\nfunction analyticsLevelRequest(level) {\n    return new Promise(function(resolve, reject) {\n        $.ajax({\n            url: \"../../../api/25/analytics.json?dimension=pe:\" + parameters.pe + \"&dimension=ou:\" + parameters.ou + \";LEVEL-\" + level + \"&hierarchyMeta=true\",\n            type: \"GET\",\n            success: function(analyticsResults) {\n                try {\n                    resolve(analyticsResults.metaData.ouHierarchy);\n                } catch (error) {\n                    reject(error);\n                }\n            },\n            error: function(error) {\n                reject(error);\n            }\n        });\n    })\n}\n\nfunction dataValueSetsRequest() {\n    return new Promise(function(resolve, reject) {\n        $.ajax({\n            url: \"../../../api/25/dataSets/\" + parameters.rule.json.data + \".json?fields=id,timelyDays,periodType,organisationUnits[level]\",\n            type: \"GET\",\n            success: function(dataValueSetsResults) {\n                try {\n                    //Code goes here\n                    resolve(dataValueSetsResults);\n                } catch (e) {\n                    reject(error);\n                }\n            },\n            error: function(error) {\n                reject(error);\n            }\n        });\n    })\n}\nanalyticsRequest().then(function(results) {\n    dataValueSetsRequest().then(function(dataSet) {\n        analyticsLevelRequest(dataSet.organisationUnits[0].level).then(function(hierarchy) {\n            $.ajax({\n                url: \"../../../api/26/completeDataSetRegistrations.json?dataSet=\" + parameters.rule.json.data + \"&orgUnit=\" + results.metaData.ou.join(\"&orgUnit=\") + \"&children=true&period=\" + results.metaData.pe.join(\"&period=\"),\n                type: \"GET\",\n                success: function(completenessResults) {\n                    if (completenessResults.completeDataSetRegistrations)\n                        results.metaData.ou.forEach(function(ou) {\n                            results.metaData.pe.forEach(function(pe) {\n                                var startDate = getDateAfterEndOfPeriod(dataSet.periodType, pe)\n                                startDate.setDate(startDate.getDate() + dataSet.timelyDays)\n                                var secondDate;\n                                var facilities = 0;\n                                var totalDifference = 0;\n                                completenessResults.completeDataSetRegistrations.forEach(function(completeDataSetRegistration) {\n                                    if(hierarchy[completeDataSetRegistration.organisationUnit])\n                                    if (completeDataSetRegistration.period == pe && hierarchy[completeDataSetRegistration.organisationUnit].indexOf(ou) > -1) {\n                                        var difference = daysBetween(new Date(completeDataSetRegistration.date),startDate);\n                                        console.log(\"Difference:\",startDate,completeDataSetRegistration.date,difference)\n                                        if(difference > 0){\n                                            totalDifference += difference;\n                                        }\n                                        facilities++;\n                                    }\n                                })\n                                if (facilities != 0) {\n                                    console.log(totalDifference,dataSet.timelyDays,facilities)\n                                    results.rows.push([parameters.rule.id, pe, ou, (totalDifference / (dataSet.timelyDays * facilities)).toFixed(2)])\n                                }\n                            })\n                        })\n                    results.height = results.rows.length\n                    console.log(results);\n                    parameters.success(results);\n                },\n                error: function(error) {\n                    parameters.error(error);\n                }\n            });\n        })\n    })\n})\n\nfunction daysBetween(date1, date2) { //Get 1 day in milliseconds   \n    var one_day = 1000 * 60 * 60 * 24; // Convert both dates to milliseconds\n    var date1_ms = date1.getTime();\n    var date2_ms = date2.getTime(); // Calculate the difference in milliseconds  \n    var difference_ms = date2_ms - date1_ms; // Convert back to days and return   \n    return Math.round(difference_ms / one_day);\n}\n\nfunction getDateAfterEndOfPeriod(periodType, pe) {\n    var date = new Date();\n    if (periodType == \"Yearly\") {\n        date = new Date(parseInt(pe.substr(0, 4)) + 1, 0, 1)\n    }else if (periodType == \"Monthly\") {\n        date = new Date(parseInt(pe.substr(0, 4)) + 1, parseInt(pe.substr(4)), 1)\n    }else if(periodType == \"Quarterly\"){\n        var firstDate = new Date(now.getFullYear(), parseInt(pe.substr(5)) * 3, 1);\n        date = new Date(firstDate.getFullYear(), firstDate.getMonth() + 3, 1);\n    }\n    return date;\n}",
  "description": "This calculates the percentage of facilities given a condition which can be modified to provide the required condition. Currently it calculates the proportion of organisation units reported on a given data set reporting rate",
  "displayName": "Sample Proportion of Facilities Given a condition",
  "lastUpdated": "Mon, 02 Aug 2021 11:57:25 GMT"
}
